// ReadItemFromCraigslist
// searches craigslist and then uses the data to create a new Item
package com.team.hv.middleman.middleman;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.util.JsonReader;
import android.util.Log;

class GetItemFromCraigslist extends AsyncTask<Object, Object, String>
{
    private static final String TAG = "GetItemFromCraigslist";

    private String searchQuery;
    private String itemName;
    private String description;
    private String location;
    private int price;
    private Array<Item> items;

    @Override
    protected String doInBackground(Object... params)
    {
        // the url for the CraigsList XML feed
        try
        {
            URL webServiceURL = new URL("http://" + location + ".craigslist.org/search/&catAbb=sss&query=" + searchQuery + "&sort=rel&format=rss";
            System.out.println(webServiceURL);
            // create a stream Reader from the Craigslist url
            Reader clReader = new InputStreamReader( webServiceURL.openStream() );

            // create a JsonReader from the Reader
            JsonReader clJsonReader = new JsonReader(clReader);

            clJsonReader.beginObject(); // read the next Object

            // get the next name
            String itemName = clJsonReader.nextName();

                clJsonReader.beginObject();

                while (clJsonReader.hasNext()
                        && !clJsonReader.nextName()
                        .equals(resources.getString(R.string.item_tag)))
                clJsonReader.beginArray();

                // read the next 10 items
                for (int i = 0; i < 10; i++)
                {
                    // start reading the next object
                    clJsonReader.beginObject();

                    // if there is more data
                    if (clJsonReader.hasNext())
                    {
                        //read the next forecast
                        items[i] = readCraigslistItem(clJsonReader);
                    } // end if
                } // end for

            clJsonReader.close(); // close the JsonReader

        } // end try
        catch (MalformedURLException e)
        {
            Log.v(TAG, e.toString());
        } // end catch
        catch (NotFoundException e)
        {
            Log.v(TAG, e.toString());
        } // end catch
        catch (IOException e)
        {
            Log.v(TAG, e.toString());
        } // end catch
        return null;
    } // end method doInBackground

    // read a single item
    private CraigslistItem readCraigslistItem(JsonReader clJsonReader)
    {
        // create array to store item information
        String[] item = new String[4];
        Bitmap iconBitmap = null; // store the item's image

        try
        {
            // while there is a next element in the current object
            while (clJsonReader.hasNext())
            {
                String name = clJsonReader.nextName(); // read next name

                if (name.equals(resources.getString(R.string.date)))
                {
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = null;
                    try {
                        date = format.parse(forecastJsonReader.nextString());
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                    Calendar calendar = Calendar.getInstance(TimeZone.getDefault());
                    calendar.setTime(date);
                    dailyForecast[DailyForecast.DAY_INDEX] =
                            getDayName(calendar.get(Calendar.DAY_OF_WEEK));
                } // end if
                else if (name.equals(resources.getString(
                        R.string.day_prediction)))
                {
                    forecastJsonReader.beginArray();
                    forecastJsonReader.beginObject();
                    forecastJsonReader.nextName();
                    dailyForecast[DailyForecast.PREDICTION_INDEX] =
                            forecastJsonReader.nextString();
                    forecastJsonReader.endObject();
                    forecastJsonReader.endArray();
                } // end else if
                else if (name.equals(resources.getString(R.string.high)))
                {
                    dailyForecast[DailyForecast.HIGH_TEMP_INDEX] =
                            forecastJsonReader.nextString();
                } // end else if
                else if (name.equals(resources.getString(R.string.low)))
                {
                    dailyForecast[DailyForecast.LOW_TEMP_INDEX] =
                            forecastJsonReader.nextString();
                } // end else if
                // if the next item is the icon name
                else if (name.equals(resources.getString(R.string.day_icon)))
                {
                    // read the icon name
                    forecastJsonReader.beginArray();
                    forecastJsonReader.beginObject();
                    forecastJsonReader.nextName();
                    iconBitmap = ReadForecastTask.getIconBitmap(
                            forecastJsonReader.nextString(), resources, 0);
                    forecastJsonReader.endObject();
                    forecastJsonReader.endArray();
                } // end else if
                else // there is an unexpected element
                {
                    forecastJsonReader.skipValue(); // skip the next element
                } // end else
            } // end while
            forecastJsonReader.endObject();
        } // end try
        catch (IOException e)
        {
            Log.e(TAG, e.toString());
        } // end catch

        return new DailyForecast(dailyForecast, iconBitmap);
    } // end method readDailyForecast

    private String getDayName(int dayNum) {
        switch (dayNum) {
            case Calendar.SUNDAY: return "Sunday";
            case Calendar.MONDAY: return "Monday";
            case Calendar.TUESDAY: return "Tuesday";
            case Calendar.WEDNESDAY: return "Wednesday";
            case Calendar.THURSDAY: return "Thursday";
            case Calendar.FRIDAY: return "Friday";
            case Calendar.SATURDAY: return "Saturday";
        }
        return "Who knows?";
    }

    // update the UI back on the main thread
    protected void onPostExecute(String forecastString)
    {
        weatherFiveDayForecastListener.onForecastLoaded(forecasts);
    } // end method onPostExecute
} // end class ReadFiveDayForecastTask